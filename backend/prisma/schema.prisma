generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                          String               @id @default(cuid())
  username                    String?              @unique
  email                       String               @unique
  password                    String?
  name                        String?
  role                        String               @default("user")
  isActivated                 Boolean              @default(false)
  activationToken             String?
  activationTime              DateTime?
  isTrial                     Boolean              @default(false)
  subscriptionDurationMinutes Int?
  createdAt                   DateTime             @default(now())
  updatedAt                   DateTime             @updatedAt
  devices                     Device[]
  sensor                      Sensor[]
  subscriptionProfile         SubscriptionProfile?
  logs                        UserLog[]
  wazuhAgents                 WazuhAgent[]
}

model SubscriptionProfile {
  id          String    @id @default(cuid())
  plan        String
  price       Int
  companyName String
  fullName    String
  city        String
  country     String
  email       String?
  createdAt   DateTime  @default(now())
  userId      String?   @unique
  payments    Payment[]
  user        User?     @relation(fields: [userId], references: [id])
}

model Device {
  id        String   @id @default(cuid())
  prtgId    String?
  name      String
  type      String?
  host      String?
  parentId  String?
  status    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  sensors   Sensor[] @relation("DeviceSensors")
}

model Sensor {
  id        String      @id @default(cuid())
  name      String
  type      String
  deviceId  String
  userId    String
  prtgId    String
  status    String?
  lastValue Float?
  message   String?
  createdAt DateTime    @default(now())
  timestamp DateTime?   @default(now()) @db.Timestamptz(6)
  device    Device      @relation("DeviceSensors", fields: [deviceId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id])
  logs      SensorLog[] @relation("SensorLogs")
}

model SensorLog {
  id        String   @id @default(cuid())
  sensorId  String
  value     Float
  message   String?
  createdAt DateTime @default(now())
  sensor    Sensor   @relation("SensorLogs", fields: [sensorId], references: [id], onDelete: Cascade)
}

model UserLog {
  id        Int      @id @default(autoincrement())
  userId    String?
  username  String?
  action    String
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
}

model Payment {
  id        String               @id @default(cuid())
  orderId   String               @unique
  package   String
  price     Int
  status    String               @default("pending")
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  profileId String?
  profile   SubscriptionProfile? @relation(fields: [profileId], references: [id])
}

model WazuhAgent {
  id              String                    @id @default(cuid())
  agentId         String                    @unique
  name            String
  ip              String?
  status          String
  os              String?
  manager         String?
  group           String?
  version         String?
  createdAt       DateTime                  @default(now())
  updatedAt       DateTime                  @updatedAt
  userId          String
  user            User                      @relation(fields: [userId], references: [id])
  alerts          WazuhAgentAlert[]
  compliance      WazuhAgentCompliance?
  metrics         WazuhAgentMetric[]
  vulnerabilities WazuhAgentVulnerability[]
}

model WazuhAgentMetric {
  id           String     @id @default(cuid())
  cpuUsage     Float?
  memoryUsage  Float?
  diskUsage    Float?
  collectedAt  DateTime   @default(now())
  wazuhAgentId String
  agent        WazuhAgent @relation(fields: [wazuhAgentId], references: [id], onDelete: Cascade)
}

model WazuhAgentAlert {
  id           String     @id @default(cuid())
  type         String
  severity     String
  message      String?
  createdAt    DateTime   @default(now())
  wazuhAgentId String
  agent        WazuhAgent @relation(fields: [wazuhAgentId], references: [id], onDelete: Cascade)
}

model WazuhAgentVulnerability {
  id           String     @id @default(cuid())
  severity     String
  count        Int
  createdAt    DateTime   @default(now())
  wazuhAgentId String
  agent        WazuhAgent @relation(fields: [wazuhAgentId], references: [id], onDelete: Cascade)
}

model WazuhAgentCompliance {
  id           String     @id @default(cuid())
  percentage   Float
  lastCheck    DateTime   @default(now())
  wazuhAgentId String     @unique
  agent        WazuhAgent @relation(fields: [wazuhAgentId], references: [id], onDelete: Cascade)
}
