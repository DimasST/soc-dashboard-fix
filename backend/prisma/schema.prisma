generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String     @id @default(cuid())
  username        String?    @unique
  email           String     @unique
  password        String?
  name            String?
  role            String     @default("user")
  isActivated     Boolean    @default(false)
  activationToken String?
  activationTime  DateTime?
  isTrial         Boolean    @default(false)
  subscriptionDurationMinutes Int?

  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  logs            UserLog[]
  subscriptionProfile SubscriptionProfile?  // ⬅️ hanya satu aktif
  devices         Device[]     
  sensor          Sensor[]            

  // NEW: relasi ke Wazuh agents (hanya tampilkan agent yg berelasi dengan user yg login)
  wazuhAgents     WazuhAgent[]
}

model SubscriptionProfile {
  id           String   @id @default(cuid())
  plan         String
  price        Int
  companyName  String
  fullName     String
  city         String
  country      String
  email        String?
  createdAt    DateTime @default(now())

  userId       String?   @unique
  user         User?     @relation(fields: [userId], references: [id])

  payments     Payment[]
}

model Device {
  id        String   @id @default(cuid())
  prtgId    String?  
  name      String
  type      String?
  host      String?   
  parentId  String?   
  status    Int? 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId String
  user   User @relation(fields: [userId], references: [id])

  sensors Sensor[] @relation("DeviceSensors") // ⬅️ kasih nama relasi
}

model Sensor {
  id        String   @id @default(cuid())
  name      String
  type      String
  deviceId  String
  userId    String
  prtgId    String
  status    String?
  lastValue Float?
  message   String?
  createdAt DateTime @default(now())

  logs      SensorLog[] @relation("SensorLogs") // ⬅️ kasih nama relasi
  device    Device   @relation("DeviceSensors", fields: [deviceId], references: [id], onDelete: Cascade) // ⬅️ cascade
  user      User     @relation(fields: [userId], references: [id])
}

model SensorLog {
  id        String   @id @default(cuid())
  sensorId  String
  value     Float
  message   String?   
  createdAt DateTime @default(now())

  sensor    Sensor   @relation("SensorLogs", fields: [sensorId], references: [id], onDelete: Cascade) // ⬅️ cascade
}

model UserLog {
  id        Int      @id @default(autoincrement())
  userId    String?
  username  String?
  action    String
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())

  user      User?    @relation(fields: [userId], references: [id])
}

model Payment {
  id        String   @id @default(cuid())
  orderId   String   @unique
  package   String
  price     Int
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  profileId String?
  profile   SubscriptionProfile? @relation(fields: [profileId], references: [id])
}

model WazuhAgent {
  id        String   @id @default(cuid())
  agentId   String   @unique    // ID dari Wazuh API (unik global)
  name      String
  ip        String?
  status    String   // e.g. "active", "disconnected"
  os        String?
  manager   String?
  group     String?
  version   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relasi
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  metrics   WazuhAgentMetric[]
  alerts    WazuhAgentAlert[]
  vulnerabilities WazuhAgentVulnerability[]
  compliance WazuhAgentCompliance?
}

model WazuhAgentMetric {
  id        String   @id @default(cuid())
  cpuUsage  Float?
  memoryUsage Float?
  diskUsage Float?
  collectedAt DateTime @default(now())

  wazuhAgentId String
  agent        WazuhAgent @relation(fields: [wazuhAgentId], references: [id], onDelete: Cascade)
}

model WazuhAgentAlert {
  id        String   @id @default(cuid())
  type      String   // login_failed, malware, file_change, dll
  severity  String   // low, medium, high, critical
  message   String?
  createdAt DateTime @default(now())

  wazuhAgentId String
  agent        WazuhAgent @relation(fields: [wazuhAgentId], references: [id], onDelete: Cascade)
}

model WazuhAgentVulnerability {
  id        String   @id @default(cuid())
  severity  String   // critical, medium, low
  count     Int
  createdAt DateTime @default(now())

  wazuhAgentId String
  agent        WazuhAgent @relation(fields: [wazuhAgentId], references: [id], onDelete: Cascade)
}

model WazuhAgentCompliance {
  id        String   @id @default(cuid())
  percentage Float   // e.g. 90.0
  lastCheck  DateTime @default(now())

  wazuhAgentId String @unique
  agent        WazuhAgent @relation(fields: [wazuhAgentId], references: [id], onDelete: Cascade)
}
